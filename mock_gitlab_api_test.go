// Code generated by mockery v2.43.2. DO NOT EDIT.

package main

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGitlabAPI is an autogenerated mock type for the GitlabAPI type
type MockGitlabAPI struct {
	mock.Mock
}

type MockGitlabAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitlabAPI) EXPECT() *MockGitlabAPI_Expecter {
	return &MockGitlabAPI_Expecter{mock: &_m.Mock}
}

// GetUserByKeyFingerprint provides a mock function with given fields: ctx, keyFingerprint
func (_m *MockGitlabAPI) GetUserByKeyFingerprint(ctx context.Context, keyFingerprint string) (*User, error) {
	ret := _m.Called(ctx, keyFingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByKeyFingerprint")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, keyFingerprint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, keyFingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyFingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitlabAPI_GetUserByKeyFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByKeyFingerprint'
type MockGitlabAPI_GetUserByKeyFingerprint_Call struct {
	*mock.Call
}

// GetUserByKeyFingerprint is a helper method to define mock.On call
//   - ctx context.Context
//   - keyFingerprint string
func (_e *MockGitlabAPI_Expecter) GetUserByKeyFingerprint(ctx interface{}, keyFingerprint interface{}) *MockGitlabAPI_GetUserByKeyFingerprint_Call {
	return &MockGitlabAPI_GetUserByKeyFingerprint_Call{Call: _e.mock.On("GetUserByKeyFingerprint", ctx, keyFingerprint)}
}

func (_c *MockGitlabAPI_GetUserByKeyFingerprint_Call) Run(run func(ctx context.Context, keyFingerprint string)) *MockGitlabAPI_GetUserByKeyFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGitlabAPI_GetUserByKeyFingerprint_Call) Return(_a0 *User, _a1 error) *MockGitlabAPI_GetUserByKeyFingerprint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitlabAPI_GetUserByKeyFingerprint_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockGitlabAPI_GetUserByKeyFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitlabAPI creates a new instance of MockGitlabAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitlabAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitlabAPI {
	mock := &MockGitlabAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

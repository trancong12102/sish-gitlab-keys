// Code generated by mockery v2.43.2. DO NOT EDIT.

package authmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gitlab "github.com/trancong12102/sish-gitlab-keys/internal/gitlab"
)

// MockPubKeyGetter is an autogenerated mock type for the PubKeyGetter type
type MockPubKeyGetter struct {
	mock.Mock
}

type MockPubKeyGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPubKeyGetter) EXPECT() *MockPubKeyGetter_Expecter {
	return &MockPubKeyGetter_Expecter{mock: &_m.Mock}
}

// GetKeyByFingerprint provides a mock function with given fields: ctx, keyFingerprint
func (_m *MockPubKeyGetter) GetKeyByFingerprint(ctx context.Context, keyFingerprint string) (*gitlab.Key, error) {
	ret := _m.Called(ctx, keyFingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyByFingerprint")
	}

	var r0 *gitlab.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gitlab.Key, error)); ok {
		return rf(ctx, keyFingerprint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gitlab.Key); ok {
		r0 = rf(ctx, keyFingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyFingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPubKeyGetter_GetKeyByFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyByFingerprint'
type MockPubKeyGetter_GetKeyByFingerprint_Call struct {
	*mock.Call
}

// GetKeyByFingerprint is a helper method to define mock.On call
//   - ctx context.Context
//   - keyFingerprint string
func (_e *MockPubKeyGetter_Expecter) GetKeyByFingerprint(ctx interface{}, keyFingerprint interface{}) *MockPubKeyGetter_GetKeyByFingerprint_Call {
	return &MockPubKeyGetter_GetKeyByFingerprint_Call{Call: _e.mock.On("GetKeyByFingerprint", ctx, keyFingerprint)}
}

func (_c *MockPubKeyGetter_GetKeyByFingerprint_Call) Run(run func(ctx context.Context, keyFingerprint string)) *MockPubKeyGetter_GetKeyByFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPubKeyGetter_GetKeyByFingerprint_Call) Return(_a0 *gitlab.Key, _a1 error) *MockPubKeyGetter_GetKeyByFingerprint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPubKeyGetter_GetKeyByFingerprint_Call) RunAndReturn(run func(context.Context, string) (*gitlab.Key, error)) *MockPubKeyGetter_GetKeyByFingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPubKeyGetter creates a new instance of MockPubKeyGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPubKeyGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPubKeyGetter {
	mock := &MockPubKeyGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
